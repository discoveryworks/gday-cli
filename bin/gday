#!/bin/bash

# gday - Personal calendar and task management CLI
# Integrates Google Calendar with daily productivity workflows

# Set script directory for library imports
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Source library functions
source "$SCRIPT_DIR/lib/version.sh"
source "$SCRIPT_DIR/lib/banner.sh"
source "$SCRIPT_DIR/lib/config.sh"
source "$SCRIPT_DIR/lib/calendar.sh"

# Helper function to show only the "Later Today" section
gday_later_today_section() {
  local sort_type="${1:-alpha}"  # Default to appointment grouping
  gday_show_banner

  # Load configuration
  if ! gday_load_config; then
    return 1
  fi

  # Get filtered appointments
  local filtered_appointments=$(gday_parse_filtered_appointments)

  # Get today's calendar data
  local calendar_data=$(gday_get_calendar_data "today")

  # Calculate target date for filtering events
  local target_day=$(date "+%a")
  local target_month=$(date "+%b")
  local target_date=$(date "+%d")

  # Process calendar data and generate table with sort type
  local body=$(gday_process_calendar_data "$calendar_data" "$target_day" "$target_month" "$target_date" "$sort_type")

  # Generate filtered "Later Today" section
  echo "$body" | generate_later_today_h2s "$filtered_appointments"
}

# Helper function to show filtered appointments
gday_show_filtered_appointments() {
  gday_show_banner

  local config_file="$HOME/.config/gday/config.yml"
  if [[ ! -f "$config_file" ]]; then
    echo "Error: Configuration file not found at $config_file"
    return 1
  fi

  echo "## Filtered Appointments"
  echo "The following appointments are excluded from 'Later Today' section:"
  echo ""

  local in_filtered_appointments=false

  while IFS= read -r line; do
    if [[ "$line" =~ ^filtered_appointments: ]]; then
      in_filtered_appointments=true
    elif [[ $in_filtered_appointments == true && "$line" =~ ^[[:space:]]*-[[:space:]]*(.*) ]]; then
      local appointment=$(echo "$line" | sed 's/^[[:space:]]*-[[:space:]]*//' | sed 's/^"//' | sed 's/"$//')
      echo "- $appointment"
    elif [[ "$line" =~ ^[[:alpha:]]+: ]] && [[ $in_filtered_appointments == true ]]; then
      # New section started, stop processing filtered appointments
      break
    fi
  done < "$config_file"
}

# Helper function to show help
gday_show_help() {
  gday_show_banner

  echo "gday - Personal calendar and task management tool"
  echo ""
  echo "USAGE:"
  echo "  gday [COMMAND|DATE]"
  echo ""
  echo "COMMANDS:"
  echo "  auth              Re-authenticate with Google Calendar"
  echo "  later             Show only the 'Later Today' section"
  echo "  filtered          Show the list of filtered appointments"
  echo "  help, --help, -h  Show this help message"
  echo "  --version, -v     Show version information"
  echo ""
  echo "SORTING OPTIONS:"
  echo "  --sort-alpha      Group appointments together (default)"
  echo "  --sort-interleaved Sort all entries by time (chronological)"
  echo ""
  echo "DATE OPTIONS:"
  echo "  (no args)         Show today's schedule (default)"
  echo "  yesterday, prev   Show yesterday's schedule"
  echo "  monday            Show most recent Monday's schedule"
  echo "  tuesday           Show most recent Tuesday's schedule"
  echo "  wednesday         Show most recent Wednesday's schedule"
  echo "  thursday          Show most recent Thursday's schedule"
  echo "  friday            Show most recent Friday's schedule"
  echo "  saturday          Show most recent Saturday's schedule"
  echo "  sunday            Show most recent Sunday's schedule"
  echo "  YYYY-MM-DD        Show specific date (e.g., 1986-06-05)"
  echo "  MM/DD/YYYY        Show specific date (e.g., 06/05/1986)"
  echo "  \"Month DD, YYYY\"  Show specific date (e.g., \"June 5, 1986\")"
  echo ""
  echo "EXAMPLES:"
  echo "  gday              Show today's full schedule"
  echo "  gday yesterday    Show yesterday's schedule"
  echo "  gday friday       Show last Friday's schedule"
  echo "  gday 1986-06-05   Show Ferris Bueller's legendary day"
  echo "  gday \"June 5, 1986\" Same date with natural language"
  echo "  gday later        Show only appointments for later today"
  echo "  gday filtered     Show which appointments are filtered out"
  echo "  gday --sort-interleaved  Show schedule with strict time sorting"
  echo "  gday --sort-alpha friday Show Friday with appointment grouping"
  echo ""
  echo "VERSION: $GDAY_VERSION"
}

# Parse arbitrary date formats
parse_arbitrary_date() {
  local input_date="$1"
  local parsed_date=""

  # Try different date formats
  # ISO format: 1986-06-05
  if [[ "$input_date" =~ ^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$ ]]; then
    parsed_date=$(date -j -f "%Y-%m-%d" "$input_date" "+%Y-%m-%d" 2>/dev/null)
  # US format: 06/05/1986 or 6/5/1986
  elif [[ "$input_date" =~ ^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$ ]]; then
    parsed_date=$(date -j -f "%m/%d/%Y" "$input_date" "+%Y-%m-%d" 2>/dev/null)
  # Alternative US format: 1986/06/05
  elif [[ "$input_date" =~ ^[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}$ ]]; then
    parsed_date=$(date -j -f "%Y/%m/%d" "$input_date" "+%Y-%m-%d" 2>/dev/null)
  # Try parsing with date command (handles "June 5, 1986", etc.)
  else
    parsed_date=$(date -j -f "%B %d, %Y" "$input_date" "+%Y-%m-%d" 2>/dev/null)
    if [[ -z "$parsed_date" ]]; then
      parsed_date=$(date -j -f "%b %d, %Y" "$input_date" "+%Y-%m-%d" 2>/dev/null)
    fi
  fi

  # If we successfully parsed the date, set the global variables
  if [[ -n "$parsed_date" ]]; then
    date_arg="$parsed_date"
    display_date=$(date -j -f "%Y-%m-%d" "$parsed_date" "+%m/%d - %A" 2>/dev/null)
    week_number=$(date -j -f "%Y-%m-%d" "$parsed_date" "+%V" 2>/dev/null)
    return 0
  else
    return 1
  fi
}

# Process command line arguments and determine date
process_date_args() {
  case "$1" in
    prev|yesterday|then)
      date_arg="yesterday"
      display_date=$(date -v -1d "+%m/%d - %A")
      week_number=$(date -v -1d "+%V")
      ;;
    monday|tuesday|wednesday|thursday|friday|saturday|sunday)
      # Convert input to lowercase and capitalize first letter for display
      day_lower=$(echo "$1" | tr '[:upper:]' '[:lower:]')
      day_display=$(echo "${day_lower^}")

      # Find the most recent occurrence of the specified day
      current_day=$(date "+%A" | tr '[:upper:]' '[:lower:]')

      if [[ "$current_day" == "$day_lower" ]]; then
        # If today is the requested day, just use today
        date_arg="today"
        display_date=$(date "+%m/%d - %A")
        week_number=$(date "+%V")
      else
        # Calculate days ago - first get day numbers (0=Sunday, 6=Saturday)
        current_day_num=$(date "+%w")
        target_day_num=0

        case "$day_lower" in
          monday) target_day_num=1 ;;
          tuesday) target_day_num=2 ;;
          wednesday) target_day_num=3 ;;
          thursday) target_day_num=4 ;;
          friday) target_day_num=5 ;;
          saturday) target_day_num=6 ;;
          sunday) target_day_num=0 ;;
        esac

        # Calculate days to go back
        days_ago=$(( ($current_day_num - $target_day_num + 7) % 7 ))
        if [[ $days_ago -eq 0 ]]; then
          days_ago=7  # If calculated as 0, we want the previous week
        fi

        # Set the date argument
        date_arg="$days_ago days ago"
        display_date=$(date -v "-${days_ago}d" "+%m/%d - %A")
        week_number=$(date -v "-${days_ago}d" "+%V")
      fi
      ;;
    *)
      # Try to parse as an arbitrary date
      if [[ -n "$1" ]] && parse_arbitrary_date "$1"; then
        # Date was successfully parsed, variables set by parse_arbitrary_date
        return 0
      else
        # Default to today
        date_arg="today"
        display_date=$(date "+%m/%d - %A")
        week_number=$(date "+%V")
      fi
      ;;
  esac
}

# Process prompts from YAML configuration
process_prompts() {
  local config_file="$HOME/.config/gday/config.yml"
  # Parse new YAML structure
  # Using indexed arrays instead of associative arrays for compatibility
  prompt_groups=()
  prompt_frequencies=()
  prompt_contents=()

  # Arrays for storing group data (index-based for compatibility)
  group_names=()
  group_frequencies=()
  group_contents=()
  local current_group=""
  local current_frequency=""
  local in_content=false
  local in_prompts=false

  while IFS= read -r line; do
    # Check for prompts section
    if [[ "$line" =~ ^prompts: ]]; then
      in_prompts=true
      continue
    fi

    # Stop when we hit a non-prompts section
    if [[ "$line" =~ ^[[:alpha:]_]+: ]] && [[ $in_prompts == true ]] && [[ ! "$line" =~ ^[[:space:]] ]]; then
      break
    fi

    if [[ $in_prompts == true ]]; then
      if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*name:[[:space:]]*\"(.*)\" ]]; then
        # Start of new prompt group
        current_group="${BASH_REMATCH[1]}"
        in_content=false
      elif [[ "$line" =~ ^[[:space:]]*frequency:[[:space:]]*(.*) ]]; then
        # Frequency line
        current_frequency="${BASH_REMATCH[1]}"
        # Remove comments
        current_frequency=$(echo "$current_frequency" | sed 's/#.*//' | sed 's/[[:space:]]*$//')
        # Find or add group index
        local group_index=-1
        for i in "${!group_names[@]}"; do
          if [[ "${group_names[$i]}" == "$current_group" ]]; then
            group_index=$i
            break
          fi
        done
        if [[ $group_index -eq -1 ]]; then
          group_names+=("$current_group")
          group_frequencies+=("$current_frequency")
          group_contents+=("")
          group_index=$((${#group_names[@]} - 1))
        else
          group_frequencies[$group_index]="$current_frequency"
        fi
      elif [[ "$line" =~ ^[[:space:]]*content: ]]; then
        # Start of content section
        in_content=true
        # Content will be accumulated below
      elif [[ $in_content == true && "$line" =~ ^[[:space:]]*-[[:space:]]*(.*) ]]; then
        # Content line
        local prompt=$(echo "$line" | sed 's/^[[:space:]]*-[[:space:]]*//' | sed 's/^"//' | sed 's/"$//')
        # Find group index and append to content
        local group_index=-1
        for i in "${!group_names[@]}"; do
          if [[ "${group_names[$i]}" == "$current_group" ]]; then
            group_index=$i
            break
          fi
        done
        if [[ $group_index -ne -1 ]]; then
          local current_content="${group_contents[$group_index]}"
          if [[ -z "$current_content" ]]; then
            group_contents[$group_index]="$prompt"
          else
            group_contents[$group_index]="$current_content|$prompt"
          fi
        fi
      fi
    fi
  done < "$config_file"

  # Process each prompt group based on frequency
  for i in "${!group_names[@]}"; do
    local group="${group_names[$i]}"
    local frequency="${group_frequencies[$i]}"
    local content="${group_contents[$i]}"
    # Split content by | delimiter
    IFS='|' read -a prompts <<< "$content"

    case "$frequency" in
      "daily")
        for prompt in "${prompts[@]}"; do
          echo -e "${prompt}\n\n"
        done
        ;;
      rotating\(*\))
        # Extract count from frequency string
        local count=$(echo "$frequency" | sed 's/rotating(\([0-9]*\))/\1/')
        local day_of_year=$(date +%j)
        local total_prompts=${#prompts[@]}
        # Calculate starting index for today
        local start_index=$(( (day_of_year * count) % total_prompts ))

        # Show the specified number of prompts
        for ((i = 0; i < count && i < total_prompts; i++)); do
          local index=$(( (start_index + i) % total_prompts ))
          echo -e "${prompts[$index]}\n\n"
        done
        ;;
      random\(*\))
        # Extract count from frequency string
        local count=$(echo "$frequency" | sed 's/random(\([0-9]*\))/\1/')
        local selected=()
        local available=("${prompts[@]}")

        # Seed random with date for consistency within the day
        RANDOM=$(date +%j)

        # Pick random prompts without replacement
        for ((i = 0; i < count && ${#available[@]} > 0; i++)); do
          local rand_index=$((RANDOM % ${#available[@]}))
          echo -e "${available[$rand_index]}\n\n"
          # Remove selected prompt from available list
          available=("${available[@]:0:$rand_index}" "${available[@]:$((rand_index + 1))}")
        done
        ;;
    esac
  done
}

# Core gday processing function with sort type support
gday_run() {
  local sort_type="${1:-alpha}"  # Default to appointment grouping
  shift  # Remove sort_type from remaining arguments
  
  # Handle special commands first
  case "$1" in
    auth)
      echo "Removing gcalcli OAuth token..."
      touch ~/.gcalcli_oauth
      rm ~/.gcalcli_oauth
      echo "running \`gcalcli agenda\`. If this fails, try \`gcalcli init\` to force the auth flow"
      gcalcli init
      return
      ;;
    later)
      # Only show the "Later Today" section
      gday_later_today_section "$sort_type"
      return
      ;;
    filtered)
      # Show filtered appointments from config
      gday_show_filtered_appointments
      return
      ;;
    --help|help|-h)
      gday_show_help
      return
      ;;
    --version|-v)
      gday_show_banner
      echo "VERSION: $GDAY_VERSION"
      return
      ;;
  esac

  # Process date arguments
  process_date_args "$1"

  # Load configuration
  if ! gday_load_config; then
    return 1
  fi

  # Show banner and validate calendars
  gday_show_banner
  gday_validate_calendars

  echo ""
  echo "-------------------------------------"
  echo ""

  # Determine target date components based on date_format
  local target_day target_month target_date
  if [[ "$date_format" == "today" ]]; then
    target_day=$(date "+%a")
    target_month=$(date "+%b")
    target_date=$(date "+%d")
  else
    # Parse the date_arg to get day/month/date
    target_day=$(date -j -f "%Y-%m-%d" "$date_arg" "+%a" 2>/dev/null)
    target_month=$(date -j -f "%Y-%m-%d" "$date_arg" "+%b" 2>/dev/null)
    target_date=$(date -j -f "%Y-%m-%d" "$date_arg" "+%d" 2>/dev/null)
  fi

  # Get calendar data
  local calendar_data=$(gday_get_calendar_data "$date_arg")

  # Process calendar data with sort type
  local body=$(gday_process_calendar_data "$calendar_data" "$target_day" "$target_month" "$target_date" "$sort_type")

  # Format dateline
  local dateline="# $display_date"
  if [[ $display_date == *"Monday"* ]]; then
    dateline="# $display_date - 📆 Week $week_number"
  fi

  echo -e "${dateline}\n\n"

  # Process and display prompts
  process_prompts

  # Display main schedule table
  local title="## 🪢 Todo Today"
  local table_header="| Time    | Item                                                                                   |"
  local table_separator="|---------|----------------------------------------------------------------------------------------|"
  local kicker="\n******* DO WHATEVER THE SCHEDULE TELLS ME. AND ONLY THAT.**********\n\n\n"

  echo -e "${title}\n${table_header}\n${table_separator}\n${body}\n\n"
  echo -e "${kicker}"

  # Generate filtered "Later Today" section
  local filtered_appointments=$(gday_parse_filtered_appointments)
  echo "$body" | generate_later_today_h2s "$filtered_appointments"
}

# Main gday function
main() {
  case "$1" in
    auth)
      echo "Removing gcalcli OAuth token..."
      touch ~/.gcalcli_oauth
      rm ~/.gcalcli_oauth
      echo "running \`gcalcli agenda\`. If this fails, try \`gcalcli init\` to force the auth flow"
      gcalcli init
      return
      ;;
    later)
      # Only show the "Later Today" section
      gday_later_today_section
      return
      ;;
    filtered)
      # Show filtered appointments from config
      gday_show_filtered_appointments
      return
      ;;
    --help|help|-h)
      gday_show_help
      return
      ;;
    --version|-v)
      gday_show_banner
      echo "VERSION: $GDAY_VERSION"
      return
      ;;
    --sort-alpha)
      # Process with default appointment grouping, remove flag and continue
      shift
      gday_run "alpha" "$@"
      return
      ;;
    --sort-interleaved)
      # Process with chronological interleaving, remove flag and continue
      shift
      gday_run "interleaved" "$@"
      return
      ;;
  esac

  # Process date arguments
  process_date_args "$1"

  # Load configuration
  if ! gday_load_config; then
    return 1
  fi

  # Validate calendars first
  if ! gday_validate_calendars; then
    return 1
  fi

  gday_show_banner

  # Calculate target date for filtering events
  local target_day target_month target_date

  if [[ "$date_arg" == "today" ]]; then
    target_day=$(date "+%a")
    target_month=$(date "+%b")
    target_date=$(date "+%d")
  elif [[ "$date_arg" == "yesterday" ]]; then
    target_day=$(date -v -1d "+%a")
    target_month=$(date -v -1d "+%b")
    target_date=$(date -v -1d "+%d")
  elif [[ "$date_arg" =~ ([0-9]+)\ days\ ago ]]; then
    local days_ago="${BASH_REMATCH[1]}"
    target_day=$(date -v "-${days_ago}d" "+%a")
    target_month=$(date -v "-${days_ago}d" "+%b")
    target_date=$(date -v "-${days_ago}d" "+%d")
  elif [[ "$date_arg" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    # Arbitrary date in YYYY-MM-DD format
    target_day=$(date -j -f "%Y-%m-%d" "$date_arg" "+%a" 2>/dev/null)
    target_month=$(date -j -f "%Y-%m-%d" "$date_arg" "+%b" 2>/dev/null)
    target_date=$(date -j -f "%Y-%m-%d" "$date_arg" "+%d" 2>/dev/null)
  fi

  # Get calendar data
  local calendar_data=$(gday_get_calendar_data "$date_arg")

  # Process calendar data with default sort type
  local body=$(gday_process_calendar_data "$calendar_data" "$target_day" "$target_month" "$target_date" "alpha")

  # Format dateline
  local dateline="# $display_date"
  if [[ $display_date == *"Monday"* ]]; then
    dateline="# $display_date - 📆 Week $week_number"
  fi

  echo -e "${dateline}\n\n"

  # Process and display prompts
  process_prompts

  # Display main schedule table
  local title="## 🪢 Todo Today"
  local table_header="| Time    | Item                                                                                   |"
  local table_separator="|---------|----------------------------------------------------------------------------------------|"
  local kicker="\n******* DO WHATEVER THE SCHEDULE TELLS ME. AND ONLY THAT.**********\n\n\n"

  echo -e "${title}\n${table_header}\n${table_separator}\n${body}\n\n"
  echo -e "${kicker}"

  # Show git activity report if yday-semantic exists
  if command -v yday-semantic >/dev/null 2>&1; then
    yday-semantic
  fi

  # Show the Later Today section
  local filtered_appointments=$(gday_parse_filtered_appointments)
  echo "$body" | generate_later_today_h2s "$filtered_appointments"
}

# Run main function with all arguments
main "$@"
