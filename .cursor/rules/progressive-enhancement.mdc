---
description: Guidelines for progressive enhancement including offline capabilities
globs: "app/**/*.{rb,swift,js,html,erb,haml}"
alwaysApply: false
---

# Progressive Enhancement Principles

## Core Philosophy
- Start with a functional baseline experience that works everywhere
- Layer enhancements based on browser/device capabilities
- Content and core functionality must be accessible without JS
- Treat offline support as a progressive enhancement, not a fallback
- Follow the rule: "Make it work, make it better, make it optional"

## API Design
- Design APIs with degraded network conditions in mind
- Support both simple and advanced consumption patterns
- Include timestamps in all models for conflict resolution
- Design endpoints to handle batch operations efficiently
- Support partial updates to minimize payload size
- Use ETags or other caching mechanisms for efficient synchronization

## Accessibility as Progressive Enhancement
- Ensure base functionality works with keyboard navigation alone
- Add ARIA attributes as enhancement, not as a replacement for semantic HTML
- Test with screen readers and assistive technologies
- Enhance based on user preferences (reduced motion, contrast, etc.)

## Testing Across the Enhancement Spectrum
- Test the baseline experience without JS or with JS disabled
- Test enhanced experiences with Turbo and Stimulus enabled
- Test with various connection speeds and network conditions
- Verify functionality during connectivity transitions (online → offline → online)
- Test with features like localStorage disabled or limited
